package com.achess.client.copyParserLexer;
import java.util.List;
import java_cup.runtime.Symbol;
import com.achess.client.error.ClientError;
import com.achess.client.copy.*;
import com.achess.client.html.*;
import java.util.ArrayList;
parser code  {: 	
  
    public CopyParser(CopyLexer lexer){
        super(lexer);		
    }

    public void syntax_error(Symbol cur_token) {        
		List<Integer> tokens = expected_token_ids();
        int line = cur_token.left;
        int column = cur_token.right;
        String lexeme = symbl_name_from_id(cur_token.sym);
        String des = "Se esperaba:    \n";
        boolean count = false;
		for(Integer i : tokens) {	
            String fromId = symbl_name_from_id(i);                        
			des += fromId +" o ";                        
            count = true;
		}
        des = des.substring(0, des.length() - 3);

        ClientError.getError().log("COPY:\n");
		ClientError.getError().log("Error sintáctico ln:"+line+" col:"+column+ " " +lexeme + "\n");
		if(count) ClientError.getError().log(des+"\n");
	}

    public void report_fatal_error(String message, Object info) {
        ClientError.getError().log("COPY:\n");
		ClientError.getError().log("Message: " + message);
		ClientError.getError().log("Info: " + info.toString());		
	}
    
:};

terminal HTML_OPEN, H1_OPEN, H2_OPEN;
terminal FOR_OPEN; 
terminal TABLE_OPEN, TR_OPEN, TH_OPEN, TD_OPEN;
terminal HTML_CLOSE, H1_CLOSE, H2_CLOSE;
terminal FOR_CLOSE; 
terminal TABLE_CLOSE, TR_CLOSE, TH_CLOSE, TD_CLOSE;
terminal BR_OPEN;

terminal ITERADOR, HASTA;

terminal STRING, INTEGER;
terminal String INTEGER_LITERAL;
terminal String STRING_LITERAL;
terminal String IDENTIFIER;
terminal String TEXT;

terminal RESULT;
terminal String SCORE, CLASES, METODOS, VARIABLES, COMENTARIOS; 
terminal String TIPO, FUNCION ,NOMBRE, PARAMETROS, TEXTO_COMENTARIO;

terminal LPAREN, RPAREN;
terminal LBRACKET, RBRACKET;
terminal SEMICOLON, COLON;
terminal COMMA, DOT;

terminal EQ;
terminal PLUS, MINUS, MULT, DIV;

terminal DPESOS;
terminal GT;

non terminal initialState;

non terminal field_definitions_opt;
non terminal field_definitions;
non terminal field_definition;
non terminal ArrayList<CopyVariable> variable_declarators;
non terminal CopyVariable variable_declarator;
non terminal CopyVariable variable_assignment;
non terminal String name;
non terminal String reserved;

non terminal String access_result;
non terminal String access_score;
non terminal String access_variables;
non terminal String access_methods;
non terminal String access_classes;
non terminal String access_comments;

non terminal String result_variables;
non terminal Integer class_variables;
non terminal Integer method_variables;
non terminal Integer var_variables;
non terminal String id_call;


non terminal String integer_value;

non terminal Integer type;
non terminal Value values;

non terminal Operation operation, term, factor;

non terminal HtmlElement h1_tag, h1_body;
non terminal HtmlElement h2_tag, h2_body;
non terminal HtmlElement table_tag;
non terminal ArrayList<HtmlElement> table_body;
non terminal HtmlElement tr_tag;
non terminal ArrayList<HtmlElement> tr_body;
non terminal HtmlElement th_tag;
non terminal NoTag th_body;
non terminal HtmlElement td_tag;
non terminal NoTag td_body;

non terminal HtmlElement html_element_no_for_tag;

non terminal HtmlElement for_tag; 
non terminal ArrayList<HtmlElement> for_body;
non terminal ArrayList<HtmlElement> for_body_elements;
non terminal HtmlElement for_body_element;
non terminal HtmlElement for_table_tag;
non terminal ArrayList<HtmlElement> for_table_body;
non terminal ArrayList<HtmlElement> for_table_elements;
non terminal HtmlElement for_table_element;
non terminal HtmlElement for_tr_tag;
non terminal ArrayList<HtmlElement> for_tr_body;
non terminal ArrayList<HtmlElement> for_tr_elements;
non terminal HtmlElement for_tr_element;

non terminal HtmlElement br_tag;
non terminal String call_variable;

non terminal ArrayList<HtmlElement> table_elemets;
non terminal HtmlElement table_element;
non terminal ArrayList<HtmlElement> tr_elements; 
non terminal HtmlElement tr_element;


non terminal NoTag var_and_values;
non terminal String values_html;
non terminal html_declarator;
non terminal ArrayList<HtmlElement> html_body;
non terminal HtmlElement html_element;
non terminal html_tag_open, html_tag_close;
non terminal h1_tag_open, h1_tag_close;
non terminal h2_tag_open, h2_tag_close;
non terminal table_tag_open, table_tag_close;
non terminal tr_tag_open, tr_tag_close;
non terminal th_tag_open, th_tag_close;
non terminal td_tag_open, td_tag_close;
non terminal ArrayList<String>for_tag_open;
non terminal for_tag_close;
non terminal br_tag_open;


start with initialState;


initialState ::= field_definitions_opt html_declarator
                ;

field_definitions_opt ::= 
                        | field_definitions
                        ;

field_definitions ::= field_definition
                    | field_definitions field_definition
                    ;

field_definition ::= type:type variable_declarators:arr SEMICOLON
                {:
                    arr.forEach(v -> {
                            v.setType(type);
                            if(v.op == null){
                                ParseCopy.getCopy().addVariable(v);
                            }else{
                                ParseCopy.getCopy().addVariable(v, v.op);
                            }
                            
                        });
                :}
                   | variable_assignment:v SEMICOLON
                   {:
                        ParseCopy.getCopy().reAssignVariable(v.getName(), v.op);
                   :}
                   ;
                
name ::= IDENTIFIER:st
        {:
            RESULT=st;
        :}
        | reserved:st
        {:
            RESULT=st;
        :}
        ;
        

reserved ::= SCORE:st
        {:
            RESULT=st;
        :}
        | CLASES:st
        {:
            RESULT=st;
        :}
        | METODOS:st
        {:
            RESULT=st;
        :}
        | VARIABLES:st
        {:
            RESULT=st;
        :}
        | COMENTARIOS:st
        {:
            RESULT=st;
        :}
        | TIPO:st
        {:
            RESULT=st;
        :}
        | FUNCION:st
        {:
            RESULT=st;
        :}
        | NOMBRE:st
        {:
            RESULT=st;
        :}
        | PARAMETROS:st
        {:
            RESULT=st;
        :}
        | TEXTO_COMENTARIO:st
        {:
            RESULT=st;
        :}
        ;


variable_assignment ::= name:name EQ operation:op
                        {:
                            CopyVariable v = new CopyVariable(name, 0, op);
                            RESULT=v;
                        :}
                        ;

variable_declarators ::= variable_declarator:v
                        {:
                            ArrayList<CopyVariable> arr = new ArrayList();
                            arr.add(v);
                            RESULT=arr;
                        :}
                        | variable_declarators:arr COMMA variable_declarator:v
                        {:                            
                            arr.add(v);
                            RESULT=arr;
                        :}
                        ;

variable_declarator ::= name:name
                        {:
                            CopyVariable v = new CopyVariable(name, 0);
                            RESULT=v;
                        :}
                    | variable_assignment:v
                    {:                        
                        RESULT=v;
                    :}
                    ;

integer_value ::= name:st
            {:
                CopyVariable v = ParseCopy.getCopy().getVariable(st);                
                if(v == null) ClientError.getError().log("COPY\nLa variable " + st + " no existe ln:"+ stleft);
                else if(v.getValue() == null) ClientError.getError().log("COPY\n" + st + " No tiene ningún valor ln:"+ stleft);
                else if(v.getValue().getType() != Value.INTEGER){
                    ClientError.getError().log("COPY\n" + st + " debe ser entero ln:"+ stleft);                    
                }
                else{
                    RESULT=st;
                }                
            :}
            | INTEGER_LITERAL:st
            {:
                RESULT=st;
            :}
            ;

access_result ::= RESULT DOT result_variables:val
                {:      
                    if(val != null){
                        RESULT=val;
                    }
                    else{
                        RESULT="";
                    }
                :}
                ;

result_variables ::= access_score:val
                {:
                    RESULT=val;
                :}
                | access_classes:val
                {:
                    RESULT=val;
                :}
                | access_methods:val
                {:
                    RESULT=val;
                :}
                | access_variables:val
                {:
                    RESULT=val;
                :}
                | access_comments:val
                {:
                    RESULT=val;
                :}
                ;


access_score ::= SCORE
                {:
                    String name = "~result~score";                    
                    RESULT=name;
                :}
                ;

access_classes ::= CLASES LBRACKET integer_value:index RBRACKET DOT class_variables:param
                    {:      
                        if(index != null){
                            String name = "~result~clases-"+param+"-,"+index;
                            RESULT=name;  
                        }                        
                    :}
                    ;

class_variables ::= NOMBRE
                    {:
                        RESULT = 0;
                    :}
                    ;

access_methods ::= METODOS LBRACKET integer_value:index RBRACKET DOT method_variables:param
                    {:
                        if(index != null){                                                       
                            String name = "~result~metodos-"+param+"-,"+index;                                
                            RESULT=name;                                                       
                        }                                                     
                    :}
                    ;

method_variables ::= class_variables:n
                    {: 
                        RESULT=n;
                    :}
                    | TIPO
                    {: 
                        RESULT=1;
                    :}
                    | PARAMETROS
                    {: 
                        RESULT=2;
                    :}
                    ; 

access_variables ::= VARIABLES LBRACKET integer_value:index RBRACKET DOT var_variables:param
                    {:
                        if(index != null){                            
                            String name = "~result~variables-"+param+"-,"+index;                                
                            RESULT=name;                                                             
                        }
                    :}
                    ;

var_variables ::= class_variables:n
                    {:
                        RESULT=n;
                    :}
                    | TIPO
                    {: 
                        RESULT=1;
                    :}
                    | FUNCION
                    {:
                        RESULT=2; 
                    :}
                    ;

access_comments ::= COMENTARIOS LBRACKET integer_value:index RBRACKET DOT TEXTO_COMENTARIO
                    {:
                        if(index != null){                           
                            String name = "~result~comentarios-0-,"+index;                                
                            RESULT=name;                        
                        }                            
                    :}
                    ;

type ::= STRING
        {:
                RESULT=Value.STRING;
        :}
        | INTEGER
        {:
                RESULT=Value.INTEGER;
        :}
        ;

values ::= STRING_LITERAL:st
        {:
            RESULT=new Value(st, Value.STRING);
        :}
        | INTEGER_LITERAL:st
        {:
            RESULT=new Value(st, Value.INTEGER);
        :}
        ;

operation ::= operation:opL PLUS:s term:opR
            {:
                RESULT=new Operation(Operation.SUMA, opL, opR, sleft);
            :}
            |operation:opL MINUS:s term:opR
            {:
                RESULT=new Operation(Operation.RESTA, opL, opR, sleft);
            :}
            |term:term
            {:
                RESULT=term;
            :}
            ;

term::= term:opL MULT:s factor:opR
            {:
                RESULT=new Operation(Operation.MULTIPLICACION, opL, opR, sleft);
            :}
        |term:opL DIV:s factor:opR
        {:
            RESULT=new Operation(Operation.DIVISION, opL, opR, sleft);
        :}
        |factor:factor    
        {:
            RESULT=factor;
        :}
        ;

factor::= values:val
        {:
            RESULT = new Operation(val, valleft);
        :}      
        | name:name
        {:
            RESULT = new Operation(name, nameleft);
        :}      
        | access_result:name     
        {:
            RESULT = new Operation(name, nameleft, true);
        :}      
        |LPAREN operation:op RPAREN      
        {:
            RESULT=op;
        :}                  
        | MINUS:s factor:factor
        {:
            RESULT=new Operation(Operation.NEGACION, factor, null, sleft);
        :}        
        ;

html_tag_open::= HTML_OPEN GT;
html_tag_close ::= HTML_CLOSE GT;
h1_tag_open::= H1_OPEN GT;
h1_tag_close ::= H1_CLOSE GT;
h2_tag_open::= H2_OPEN GT;
h2_tag_close ::= H2_CLOSE GT;
table_tag_open ::= TABLE_OPEN GT;
table_tag_close ::= TABLE_CLOSE GT;
tr_tag_open ::= TR_OPEN GT;
tr_tag_close ::= TR_CLOSE GT;
th_tag_open ::= TH_OPEN GT;
th_tag_close ::= TH_CLOSE GT;
td_tag_open ::= TD_OPEN GT;
td_tag_close ::= TD_CLOSE GT;
for_tag_open ::= FOR_OPEN ITERADOR COLON integer_value:index HASTA COLON integer_value:index2 GT
                {: 
                    if(index != null && index2 != null){
                        ArrayList<String> arr= new ArrayList();
                        arr.add(index);
                        arr.add(index2);
                        RESULT=arr;
                    }
                :}
                ;

for_tag_close ::= FOR_CLOSE GT;
br_tag_open ::= BR_OPEN GT
            ;



html_declarator ::=  html_tag_open html_body:body html_tag_close
                    {:
                        HtmlMain.getHtml().setElements(body);
                        System.out.println("---------------");
                        System.out.println(HtmlMain.getHtml().run());
                    :}
                    ;

values_html ::= name:st
        {:
            RESULT=st;
        :}
        | STRING_LITERAL:st 
        {:
            RESULT=st;
        :}
        | INTEGER_LITERAL:st
        {:
            RESULT=st;
        :}
        | TEXT:st
        {:
            RESULT=st;
        :}        
        ;

var_and_values ::= values_html:val
                {: 
                    RESULT=new NoTag(val, false);
                :}
                | call_variable:st
                {:
                    RESULT=new NoTag(st, true);
                :}
                ;

call_variable ::= DPESOS LPAREN id_call:st RPAREN DPESOS
                    {: 
                        RESULT=st;
                    :}
                    ;
                

id_call ::= name:st
        {:
            /* RESULT="";
            CopyVariable variable = ParseCopy.getCopy().getVariable(st);
            if(variable == null){
                ClientError.getError().log("COPY\nLa variable no está definida ln:" + stleft);
            }
            else if(variable.getValue() == null){
                ClientError.getError().log("COPY\nLa variable no tiene ningún valor ln:" + stleft);
            }else{
                RESULT=variable.getValue().getValue();
            } */
            RESULT=st;
        :}
        | access_result:val
        {:
            RESULT=val;
        :}
        ;

html_body ::= html_element:h
            {: 
                ArrayList<HtmlElement> arr = new ArrayList();
                if(h != null) arr.add(h);
                RESULT=arr;
            :}
            | html_body:arr html_element:h
            {:
                if(h != null) arr.add(h);
                RESULT=arr;
            :}
            ;

html_element ::= html_element_no_for_tag:h
                {:
                    RESULT=h;
                :}
                | for_tag:h                
                {:
                    RESULT=h;
                :}
                | var_and_values:h
                {:
                    RESULT=h;
                :}
                ;

html_element_no_for_tag ::= h1_tag:h
                    {:
                        RESULT=h;
                    :}
                    | h2_tag:h
                    {:
                        RESULT=h;
                    :}
                    | table_tag:h
                    {:
                        RESULT=h;
                    :}
                    | br_tag:h
                    {:
                        RESULT=h;
                    :}
                    ;
            
h1_tag ::= h1_tag_open h1_body:h h1_tag_close
            {:
                RESULT=h;
            :}
            ;

h1_body ::= var_and_values:h
            {:                
                RESULT=new H1Tag(h.getValue(), h.isIdentifier());
            :}
            ;

h2_tag ::= h2_tag_open h2_body:h h2_tag_close
            {:
                RESULT=h;
            :}            
            ;

h2_body ::= var_and_values:h
            {:
                RESULT=new H2Tag(h.getValue(), h.isIdentifier());
            :}
            ;

br_tag ::= br_tag_open
            {:
                RESULT=new BrTag();
            :}
            ;

for_tag::= for_tag_open:arr for_body:arr2 for_tag_close
            {:
                if(arr != null){
                    RESULT=new ForTag(arr2, arr.get(0), arr.get(1));
                }
            :}
            ;

for_body ::= for_body_elements:arr
            {: 
                RESULT=arr;
            :}
            ;

for_body_elements ::= for_body_element:h
                    {:
                        ArrayList<HtmlElement> arr = new ArrayList();
                        if(h != null) arr.add(h);
                        RESULT=arr;
                    :}
                    | for_body_elements:arr for_body_element:h
                    {:                      
                        if(h != null) arr.add(h);
                        RESULT=arr;
                    :}                    
                    ;

for_body_element ::= html_element_no_for_tag:h
                    {:
                        RESULT=h;
                    :}
                    | var_and_values:h
                    {:
                        RESULT=h;
                    :}                    
                    ;

table_tag ::= table_tag_open table_body:arr table_tag_close
            {:
                RESULT=new TableTag(arr);
            :}
            ;            

table_body::= table_elemets:arr
            {:
                RESULT=arr;
            :}
            ;

table_elemets ::= table_element:h
            {:
                ArrayList<HtmlElement> arr = new ArrayList();
                if(h != null) arr.add(h);
                RESULT=arr;
            :}
            | table_elemets:arr table_element:h
            {:                
                if(h != null) arr.add(h);
                RESULT=arr;
            :}            
            ;

table_element ::= tr_tag:h
                {:                  
                    RESULT=h;
                :}
                | for_table_tag:h
                {:                
                    RESULT=h;
                :}
                ;

for_table_tag ::= for_tag_open:arr for_table_body:arr2 for_tag_close
                    {:
                        if(arr != null){
                            RESULT=new ForTag(arr2, arr.get(0), arr.get(1));
                        }
                    :}                    
                    ;

for_table_body ::= for_table_elements:arr
                    {: 
                        RESULT=arr;                        
                    :}
                    ;

for_table_elements ::= for_table_element:h
                    {:
                        ArrayList<HtmlElement> arr = new ArrayList();
                        if(h != null) arr.add(h);
                        RESULT=arr;
                    :}
                    |   for_table_elements:arr for_table_element:h
                    {:                        
                        if(h != null) arr.add(h);
                        RESULT=arr;
                    :}
                    ;

for_table_element ::= tr_tag:h
                    {:                        
                        RESULT=h;
                    :}
                    ;

tr_tag ::= tr_tag_open tr_body:arr tr_tag_close
            {: 
                if(arr != null){
                    RESULT=new TrTag(arr);
                }
            :}
            ;

tr_body ::= tr_elements:arr
        {: 
            RESULT=arr;
        :}
        ;

tr_elements ::= tr_element:h
            {:
                ArrayList<HtmlElement> arr = new ArrayList();
                if(h != null) arr.add(h);
                RESULT=arr;
            :}
            | tr_elements:arr tr_element:h
            {:              
                if(h != null) arr.add(h);
                RESULT=arr;
            :}        
            ;

tr_element ::= th_tag:h
            {:
                RESULT=h;
            :}
            | td_tag:h
            {:
                RESULT=h;
            :}
            | for_tr_tag:h
            {:
                RESULT=h;
            :}
            ;

for_tr_tag ::= for_tag_open:arr for_tr_body:arr2 for_tag_close
            {:
                if(arr != null){
                    RESULT=new ForTag(arr2, arr.get(0), arr.get(1));
                }
            :}  
            ;

for_tr_body ::= for_tr_elements:arr
                {:
                    RESULT=arr;
                :}
                ;

for_tr_elements ::= for_tr_element:h
                {:
                    ArrayList<HtmlElement> arr = new ArrayList();
                    if(h != null) arr.add(h);
                    RESULT=arr;
                :}
                |   for_tr_elements:arr for_tr_element:h
                {:                  
                    if(h != null) arr.add(h);
                    RESULT=arr;
                :}                
                ;

for_tr_element ::= td_tag:h
                {: 
                    RESULT=h;
                :}
                |  th_tag:h
                {: 
                    RESULT=h;
                :}                
                ;

th_tag ::= th_tag_open th_body:h th_tag_close
            {:
                RESULT=new ThTag(h.getValue(), h.isIdentifier());
            :}
            ;

th_body ::= var_and_values:h
            {:
                RESULT=h;
            :}
            ;

td_tag ::= td_tag_open td_body:h td_tag_close
            {:
                RESULT=new TdTag(h.getValue(), h.isIdentifier());
            :}
            ;

td_body ::= var_and_values:h
            {:
                RESULT=h;
            :}
            ;
            