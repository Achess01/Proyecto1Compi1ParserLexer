
parser code  {: 	
  
    public CopyParser(CopyLexer lexer){
        super(lexer);		
    }

    public void syntax_error(Symbol cur_token) {        
		List<Integer> tokens = expected_token_ids();
        int line = cur_token.left;
        int column = cur_token.right;
        String lexeme = symbl_name_from_id(cur_token.sym);
        String des = "Se esperaba:    \n";
        boolean count = false;
		for(Integer i : tokens) {	
            String fromId = symbl_name_from_id(i);                        
			des += fromId +" o ";                        
            count = true;
		}
        des = des.substring(0, des.length() - 3);

        Error.getError().log("COPY:\n");
		Error.getError().log("Error sint√°ctico ln:"+line+" col:"+column+ " " +lexeme + "\n");
		if(count) Error.getError().log(des+"\n");
	}

    public void report_fatal_error(String message, Object info) {
        Error.getError().log("COPY:\n");
		Error.getError().log("Message: " + message);
		Error.getError().log("Info: " + info.toString());		
	}
    
:};

terminal GT, LT;
terminal HTML, H1, H2;
terminal FOR, ITERADOR, HASTA;
terminal TABLE, TR, TH, TD;
terminal BR;

terminal STRING, INTEGER;
terminal INTEGER_LITERAL;
terminal STRING_LITERAL;
terminal IDENTIFIER;
terminal TEXT;

terminal RESULT, SCORE, CLASES, METODOS, VARIABLES, COMENTARIOS; 
terminal TIPO, FUNCION ,NOMBRE, PARAMETROS, TEXTO_COMENTARIO;

terminal LPAREN, RPAREN;
terminal LBRACKET, RBRACKET;
terminal SEMICOLON, COLON;
terminal COMMA, DOT;

terminal EQ;
terminal PLUS, MINUS, MULT, DIV;

terminal DPESOS;
terminal GT, LT;

non terminal initialState;

non terminal field_declarators;
non terminal field_definitions_opt;
non terminal field_definitions;
non terminal variable_declarators;
non terminal variable_declarator;
non terminal variable_assignment;

non terminal access_result;
non terminal access_score;
non terminal access_variables;
non terminal access_methods;
non terminal access_classes;
non terminal access_comments;

non terminal result_variables;
non terminal class_variables;
non terminal method_variables;
non terminal var_variables;


non terminal integer_value;

non terminal type;
non terminal values;

non terminal operation, term, factor;

non terminal html_declarator;


start with initialState;


initialState ::= field_definitions_opt html_declarator
                ;

field_definitions_opt ::= 
                        | field_definitions
                        ;

field_definitions ::= type variable_declarators SEMICOLON
                   | variable_assignment SEMICOLON;

variable_assignment ::= IDENTIFIER EQ operation;

variable_declarators ::= variable_declarator
                        | variable_declarators COMMA variable_declarator
                        ;

variable_declarator ::= IDENTIFIER
                    | variable_assignment
                    ;

integer_value ::= IDENTIFIER
            | INTEGER_LITERAL
            ;

access_result ::= RESULT DOT result_variables;

result_variables ::= access_score
                | access_classes
                | access_methods
                | access_variables
                | access_comments
                ;


access_score ::= SCORE
                ;

access_classes ::= CLASES LBRACKET integer_value RBRACKET DOT class_variables
                    ;

class_variables ::= NOMBRE
                    ;

access_methods ::= METODOS LBRACKET integer_value RBRACKET DOT method_variables
                    ;

method_variables ::= class_variables
                    | TIPO
                    | PARAMETROS
                    ; 

access_variables ::= VARIABLES LBRACKET integer_value RBRACKET DOT var_variables
                    ;

var_variables ::= class_variables
                    | TIPO
                    | FUNCION
                    ;

access_comments ::= COMENTARIOS LBRACKET integer_value RBRACKET DOT TEXTO_COMENTARIO
                    ;

type ::= STRING
        | INTEGER
        ;

values ::= IDENTIFIER
        | STRING_LITERAL
        | access_result
        | INTEGER_LITERAL
        ;

operation::= operation PLUS term 
            |operation MINUS term  
            |term
            ;

term::= term TIMES factor                        
        |term DIVISION factor                        
        |factor                        
        ;

factor::= values                                          
        |LPAREN operation RPAREN                        
        | MINUS factor                        
        ;


html_declarator ::= 

html_tag_open ::= LT HTML GT;

html_tag_close ::= LT DIV HTML GT;

h1_tag_open ::= LT H1 GT;

h1_tag_close ::= LT DIV H1 GT;

h2_tag_open ::= LT H2 GT;

h2_tag_close ::= LT DIV H2 GT;

table_tag_open ::= LT TABLE GT;

table_tag_close ::= LT DIV TABLE GT;

tr_tag_open ::= LT TR GT;

tr_tag_close ::= LT DIV TR GT;

th_tag_open ::= LT TH GT;

th_tag_close ::= LT DIV TH GT;

td_tag_open ::= LT TD GT;

td_tag_close ::= LT DIV TD GT;

for_tag_open ::= LT FOR GT;

for_tag_close ::= LT DIV FOR GT;