package com.achess.server.parser;
import com.achess.server.lexer.JavaLexer;
import com.achess.server.classAndMembers.*;
import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;

parser code  {: 
	private boolean firstProject;
  
  public JavaParser(JavaLexer lexer, boolean firstProject){
        super(lexer);
		this.firstProject = firstProject;
    }
    public void syntax_error(Symbol cur_token) {        
		List<Integer> tokens = expected_token_ids();
        int line = cur_token.left;
        int column = cur_token.right;
        String lexeme = symbl_name_from_id(cur_token.sym);
        String des = "Se esperaba:    \n";
		for(Integer i : tokens) {	
            String fromId = symbl_name_from_id(i);                        
			des += fromId +" o ";            
		}
        des = des.substring(0, des.length() - 3);
		System.out.print("Error sint√°ctico ln:"+line+" col:"+column+ " " +lexeme + "\n");
        System.out.println(des);

	}

    public void report_fatal_error(String message, Object info) {
		System.out.println("message: " + message);
		System.out.println("info: " + info);
	}
    
:};

terminal BOOLEAN; // primitive_type
terminal INT, CHAR, STRING; // integral_type
terminal DOUBLE; // floating_point_type
terminal DOT; // qualified_name
terminal SEMICOLON, MULT, COMMA, LBRACE, RBRACE, EQ, LPAREN, RPAREN, COLON;
terminal IMPORT; // import_declaration
terminal PUBLIC, PROTECTED, PRIVATE; // modifier
terminal STATIC; // modifier
terminal FINAL;
terminal CLASS; // class_declaration
terminal VOID; // method_header
terminal THIS, SUPER; // explicit_constructor_invocation
terminal IF, ELSE; // if_then_statement, if_then_else_statement
terminal SWITCH; // switch_statement
terminal CASE, DEFAULT; // switch_label
terminal DO, WHILE; // while_statement, do_statement
terminal FOR; // for_statement
terminal BREAK; // break_statement
terminal RETURN; // return_statement
terminal NEW; // class_instance_creation_expression
terminal PLUSPLUS; // postincrement_expression
terminal MINUSMINUS; // postdecrement_expression
terminal PLUS, MINUS, NOT, DIV, MOD;
terminal LT, GT, LTEQ, GTEQ; // relational_expression
terminal EQEQ, NOTEQ; // equality_expression
terminal AND; // and_expression
terminal OR;  // inclusive_or_expression
terminal ANDAND; // conditional_and_expression
terminal OROR; // conditional_or_expression
terminal MULTEQ, DIVEQ, MODEQ, PLUSEQ, MINUSEQ; // assignment_operator

terminal java.lang.Number INTEGER_LITERAL;
terminal java.lang.Number FLOATING_POINT_LITERAL;
terminal java.lang.Boolean BOOLEAN_LITERAL;
terminal java.lang.Character CHARACTER_LITERAL;
terminal java.lang.String STRING_LITERAL;
terminal java.lang.String IDENTIFIER; // name
terminal NULL_LITERAL;


non terminal initialState;

non terminal literal;
//Types, Values, and Variables
non terminal String type, primitive_type, numeric_type;
non terminal String integral_type, floating_point_type;
non terminal String reference_type;
non terminal String class_type;
//Names
non terminal String name, simple_name, qualified_name;
// Import
non terminal compilation_unit;
non terminal import_declarations_opt, import_declarations;
non terminal type_declarations_opt, type_declarations;
non terminal import_declaration;
non terminal single_type_import_declaration;
non terminal type_import_on_demand_declaration;
non terminal type_declaration;
//
non terminal modifiers_opt, modifiers, modifier;
//Class Declaration
non terminal JavaClass class_declaration;
non terminal ArrayList<Member> class_body;
non terminal ArrayList<Member> class_body_declarations, class_body_declarations_opt;
non terminal ArrayList<Member> class_body_declaration;
non terminal ArrayList<Member> class_member_declaration;
// Field Declarations
non terminal ArrayList<Member> field_declaration; 
non terminal ArrayList<Variable>variable_declarators;
non terminal Variable variable_declarator;
non terminal String variable_declarator_id; 
non terminal variable_initializer;
//  Method Declarations
non terminal Method method_declaration;
non terminal Method method_header; 
non terminal Method method_declarator;
non terminal ArrayList<Variable> formal_parameter_list_opt, formal_parameter_list;
non terminal Variable formal_parameter;
non terminal ArrayList<Variable> method_body;


// Constructor Declarations
non terminal ArrayList<Member> constructor_declaration; 
non terminal Method constructor_declarator;
non terminal ArrayList<Variable> constructor_body;
non terminal explicit_constructor_invocation;


// Blocks and Statements
non terminal ArrayList<Variable> block;
non terminal ArrayList<Variable> block_statements_opt, block_statements, block_statement;
non terminal ArrayList<Variable> local_variable_declaration_statement, local_variable_declaration;
non terminal ArrayList<Variable> statement, statement_no_short_if;
non terminal ArrayList<Variable> statement_without_trailing_substatement;
non terminal empty_statement;
non terminal expression_statement, statement_expression;
non terminal ArrayList<Variable> if_then_statement;
non terminal ArrayList<Variable> if_then_else_statement, if_then_else_statement_no_short_if;
non terminal ArrayList<Variable> switch_statement, switch_block;
non terminal ArrayList<Variable> switch_block_statement_groups;
non terminal ArrayList<Variable> switch_block_statement_group;
non terminal switch_labels, switch_label;
non terminal ArrayList<Variable> while_statement, while_statement_no_short_if;
non terminal ArrayList<Variable> do_statement;
non terminal ArrayList<Variable> for_statement, for_statement_no_short_if;
non terminal ArrayList<Variable> for_init_opt, for_init;
non terminal for_update_opt, for_update;
non terminal statement_expression_list;
non terminal identifier_opt;
non terminal break_statement;
non terminal return_statement;
//Expressions
non terminal primary, primary_no_new_array;
non terminal class_instance_creation_expression;
non terminal argument_list_opt, argument_list;
non terminal field_access, method_invocation;
non terminal postfix_expression;
non terminal postincrement_expression, postdecrement_expression;
non terminal unary_expression, unary_expression_not_plus_minus;
non terminal preincrement_expression, predecrement_expression;
non terminal multiplicative_expression, additive_expression;
non terminal shift_expression, relational_expression, equality_expression;
non terminal and_expression, exclusive_or_expression, inclusive_or_expression;
non terminal conditional_and_expression, conditional_or_expression;
non terminal conditional_expression, assignment_expression;
non terminal assignment;
non terminal left_hand_side;
non terminal assignment_operator;
non terminal expression_opt, expression;
non terminal constant_expression;


start with initialState;


initialState ::=	compilation_unit
	;

literal ::=	INTEGER_LITERAL
	|	FLOATING_POINT_LITERAL
	|	BOOLEAN_LITERAL
	|	CHARACTER_LITERAL
	|	STRING_LITERAL
	|	NULL_LITERAL
	;

//Types, Values, and Variables
type	::=	primitive_type:pt
	{:
		RESULT=pt;
	:}
	|	reference_type:rt
	{:
		RESULT=rt;
	:}
	;
primitive_type ::=
		numeric_type:nt
	{:
		RESULT=nt;
	:}
	|	BOOLEAN
	{:
		RESULT="boolean";
	:}
    |   STRING
	{:
		RESULT="String";
	:}
	;
numeric_type::=	integral_type:it
	{:
		RESULT=it;
	:}
	|	floating_point_type:ft
	{:
		RESULT=ft;
	:}
	;
integral_type ::= 	
    	INT 	
	{:
		RESULT="int";
	:}
	|	CHAR
	{:
		RESULT="char";
	:} 
	;
floating_point_type ::= 		
    	DOUBLE
		{:
			RESULT="double";
		:}
	;

reference_type ::=
		class_type:ct
		{:
			RESULT=ct;
		:}	
	;
class_type ::= name:name
		{:
			RESULT=name;
		:}	
		;


// Names
name	::=	simple_name:sn
		{:
			RESULT=sn;
		:}	
	|	qualified_name:qn
		{:
			RESULT=qn;
		:}
	;
simple_name ::=	IDENTIFIER:id 
			{: RESULT=id; :}
	;
qualified_name ::=
		name DOT IDENTIFIER:id
		{: RESULT=id; :}
	;

// Start
compilation_unit ::=		
		import_declarations_opt
		type_declarations_opt		
		| error type_declarations_opt
		;
import_declarations_opt ::= import_declarations | 							
							| error import_declarations							
							;
type_declarations_opt   ::= type_declarations   | ;

import_declarations ::= 
		import_declaration
	|	import_declarations import_declaration	
	;
type_declarations ::= 
		type_declaration
	|	type_declarations type_declaration
	;

import_declaration ::= 
		single_type_import_declaration
	|	type_import_on_demand_declaration	
	;
single_type_import_declaration ::= 
		IMPORT name SEMICOLON
	;
type_import_on_demand_declaration ::=
		IMPORT name DOT MULT SEMICOLON
	;
type_declaration ::=
		class_declaration	
		| SEMICOLON	
	;

// 
modifiers_opt::=
	|	modifiers
	;
modifiers ::= 	modifier
	|	modifiers modifier
	;
modifier ::=	PUBLIC | PROTECTED | PRIVATE
	|   STATIC | FINAL
	;
class_declaration ::= 
	modifiers_opt CLASS IDENTIFIER:id class_body:arr
	{: 
		JavaClass jc = new JavaClass(id);
		if(arr != null){
			arr.forEach(member ->{
				if(member instanceof Variable){
					Variable v = (Variable) member;
					v.setScope("Clase " + id);
				}
			});
			jc.setMembers(arr);
		}
		System.out.println(jc);
	:}	
	;
class_body ::=	LBRACE class_body_declarations_opt:arr RBRACE
				{:
					RESULT=arr;
				:}
	;

class_body_declarations_opt ::= 
	|	class_body_declarations:arr
		{:
			RESULT=arr;
		:} 	
	;

class_body_declarations ::= 
		class_body_declaration:classBD
		{:
			RESULT=classBD;
		:}
	|	class_body_declarations:arr class_body_declaration:bd
		{:
			if(bd != null){
				arr.addAll(bd);
			}
			RESULT=arr;
		:}
	|	error class_body_declaration
	| 	error RBRACE	
	;
class_body_declaration ::=
		class_member_declaration:class_member	
		{:
			RESULT=class_member;
		:}
	|	constructor_declaration:constructor
		{:
			RESULT=constructor;
		:}
	;
class_member_declaration ::=
		field_declaration:field
		{:
			RESULT=field;
		:}
	|	method_declaration:method
	{:		
		ArrayList<Member> arr = new ArrayList(); //add method
		arr.add(method);
		RESULT=arr;
	:}		
    | SEMICOLON
	;

//Field Declarations
field_declaration ::= 
		modifiers_opt type:type variable_declarators:array_members SEMICOLON
		{:
			array_members.forEach(m -> {            	
            	m.setType(type);
        	});
			ArrayList<Member> members = new ArrayList();
			members.addAll(array_members);
			RESULT=members;
		:}
	;
variable_declarators ::=
		variable_declarator:var_member
		{:
			ArrayList<Variable> members = new ArrayList();
			members.add(var_member);
			RESULT=members;
		:}
	|	variable_declarators:array_members COMMA variable_declarator:var_member
		{:
			array_members.add(var_member);
			RESULT=array_members;
		:}
	;
variable_declarator ::=
		variable_declarator_id:var_id
		{: 
			Variable mb = new Variable(var_id, "");
			RESULT=mb;
		:}
	|	variable_declarator_id:var_id EQ variable_initializer
		{:
			Variable mb = new Variable(var_id, "");
			RESULT=mb;
		:}
	;
variable_declarator_id ::=
		IDENTIFIER:id	
		{: RESULT=id; :}
	;
variable_initializer ::=
		expression	
	;

//Method Declarations
method_declaration ::=
		method_header:method method_body:variables
		{:
			if(variables != null){
				variables.forEach(v ->{
					v.setScope("M√©todo "  + method.getName());
				});
				method.setVariables(variables);
			}
			method.getParams().forEach(param ->{				
				param.setScope("M√©todo " + method.getName());
			});

			//Quitar
			
			//Quitar
			RESULT=method;
		:}
	;
method_header ::=
		modifiers_opt type:type method_declarator:method
		{:
			method.setType(type);			
			RESULT=method;	
		:}
	|	modifiers_opt VOID method_declarator:method
		{:
			method.setType("void");
			RESULT=method;
		:}
	;
method_declarator ::=
		IDENTIFIER:id LPAREN formal_parameter_list_opt:params RPAREN	
		{: 
			Method method = new Method(id, "") ;
			if(params != null){
				method.setParams(params);			
			}
			RESULT=method;
		:}
	;
formal_parameter_list_opt ::=
	|	formal_parameter_list:params
		{:
			RESULT=params;
		:}
	;
formal_parameter_list ::=
		formal_parameter:param
		{:
			ArrayList<Variable> params = new ArrayList();
			params.add(param);
			RESULT=params;
		:}
	|	formal_parameter_list:arr_params COMMA formal_parameter:param
		{:
			arr_params.add(param);
			RESULT=arr_params;
		:}
	;

formal_parameter ::=
		type:type variable_declarator_id:id
		{:
			Variable variable = new Variable(id, type);
			RESULT=variable;
		:}
	;
	
method_body ::=	block:variables
	{:
		RESULT=variables;
	:}
	|	SEMICOLON
	;

//Constructor Declarations
constructor_declaration ::=
		modifiers_opt constructor_declarator:method 
			constructor_body:variables
			{:
				if(variables != null){
					variables.forEach(v -> v.setScope("Constructor " + method.getName()));
					method.setVariables(variables);
				}
				ArrayList<Member> member = new ArrayList();
				member.add(method);				
				RESULT=member;
			:}
	;
constructor_declarator ::=
		simple_name:id LPAREN formal_parameter_list_opt:params RPAREN
		{:
			Method method = new Method(id, "~constructor");
			if(params != null){
				params.forEach(v -> v.setScope("Constructor " + id));
				method.setParams(params);
			}
			RESULT=method;
		:}
	;
constructor_body ::=
		LBRACE explicit_constructor_invocation
			block_statements:variables RBRACE
			{:
				RESULT=variables;
			:}
	|	LBRACE explicit_constructor_invocation RBRACE
	|	LBRACE block_statements:variables RBRACE
		{:
			RESULT=variables;
		:}
	|	LBRACE RBRACE
	;
explicit_constructor_invocation ::=
		THIS LPAREN argument_list_opt RPAREN SEMICOLON
	|	SUPER LPAREN argument_list_opt RPAREN SEMICOLON
	|	primary DOT THIS LPAREN argument_list_opt RPAREN SEMICOLON
	|	primary DOT SUPER LPAREN argument_list_opt RPAREN SEMICOLON
	;


//Blocks and Statements
block ::=	LBRACE block_statements_opt:variables RBRACE
	{:
		RESULT=variables;
	:}
	;
block_statements_opt ::=
	|	block_statements:variables
	{:
		RESULT=variables;
	:}	
	;
block_statements ::=
		block_statement:variables
		{:
			RESULT=variables;
		:}
	|	block_statements:prev_vars block_statement:new_vars	
	{:
		if(prev_vars != null && new_vars != null){
			prev_vars.addAll(new_vars);
			RESULT=prev_vars;
		}else if(new_vars != null){
			RESULT=new_vars;
		}
		else{
				RESULT=prev_vars;
			}
	:}
	| 	error block_statement
	| 	error RBRACE
	;
block_statement ::=
		local_variable_declaration_statement:variables
		{:
			RESULT=variables;
		:}
	|	statement:variables
		{:
			RESULT=variables;
		:}
	;

local_variable_declaration_statement ::=
		local_variable_declaration:variables SEMICOLON
		{:
			RESULT=variables;
		:}
	;
local_variable_declaration ::=
		type:type variable_declarators:variables
		{:
			variables.forEach(v -> v.setType(type));
			RESULT=variables;
		:}	
	;
statement ::=	statement_without_trailing_substatement:variables	
		{:
			RESULT=variables;
		:}
	|	if_then_statement:variables
		{:
			RESULT=variables;
		:}
	|	if_then_else_statement:variables
		{:
			RESULT=variables;
		:}
	|	while_statement:variables
		{:
			RESULT=variables;
		:}
	|	for_statement:variables
		{:
			RESULT=variables;
		:}
	;
statement_no_short_if ::=
		statement_without_trailing_substatement:variables
		{:
			RESULT=variables;
		:}	
	|	if_then_else_statement_no_short_if:variables
		{:
			RESULT=variables;
		:}
	|	while_statement_no_short_if:variables
		{:
			RESULT=variables;
		:}	
	|	for_statement_no_short_if:variables
		{:
			RESULT=variables;
		:}
	;
statement_without_trailing_substatement ::=
		block:variables
		{:
			RESULT=variables;
		:}
	|	empty_statement
	|	expression_statement
	|	switch_statement:variables
		{:
			RESULT=variables;
		:}	
	|	do_statement:variables
		{:
			RESULT=variables;
		:}
	|	break_statement	
	|	return_statement	
	;
empty_statement ::=
		SEMICOLON
	;
expression_statement ::=
		statement_expression SEMICOLON
	;
statement_expression ::=
		assignment
	|	preincrement_expression
	|	predecrement_expression
	|	postincrement_expression
	|	postdecrement_expression
	|	method_invocation
	|	class_instance_creation_expression
	;
if_then_statement ::=
		IF LPAREN expression RPAREN statement:variables
		{:
			RESULT=variables;
		:}
	;
if_then_else_statement ::=
		IF LPAREN expression RPAREN statement_no_short_if:prev_vars 
			ELSE statement:new_vars
		{:
			if(prev_vars != null && new_vars != null){
				prev_vars.addAll(new_vars);
				RESULT=prev_vars;
			}else if(new_vars != null){
				RESULT=new_vars;
			}else{
				RESULT=prev_vars;
			}
		:}
	;
if_then_else_statement_no_short_if ::=
		IF LPAREN expression RPAREN statement_no_short_if:prev_vars
			ELSE statement_no_short_if:new_vars
		{:
			if(prev_vars != null && new_vars != null){
				prev_vars.addAll(new_vars);
				RESULT=prev_vars;
			}else if(new_vars != null){
				RESULT=new_vars;
			}else{
				RESULT=prev_vars;
			}
		:}
	;
switch_statement ::=
		SWITCH LPAREN expression RPAREN switch_block:variables
		{:
			RESULT=variables;
		:}
	;
switch_block ::=
		LBRACE switch_block_statement_groups:variables switch_labels RBRACE
		{:
			RESULT=variables;
		:}
	|	LBRACE switch_block_statement_groups:variables RBRACE
		{:
			RESULT=variables;
		:}
	|	LBRACE switch_labels RBRACE
	|	LBRACE RBRACE
	;
switch_block_statement_groups ::=
		switch_block_statement_group:variables
		{:
			RESULT=variables;
		:}
	|	switch_block_statement_groups:prev_vars switch_block_statement_group:new_vars
		{:
			if(prev_vars != null && new_vars != null){
				prev_vars.addAll(new_vars);
				RESULT=prev_vars;
			}else if(new_vars != null){
				RESULT=new_vars;
			}else{
				RESULT=prev_vars;
			}
		:}
	;
switch_block_statement_group ::=
		switch_labels block_statements:variables
		{:
			RESULT=variables;
		:}
	;
switch_labels ::=
		switch_label
	|	switch_labels switch_label
	;
switch_label ::=
		CASE constant_expression COLON
	|	DEFAULT COLON
	;

while_statement ::=
		WHILE LPAREN expression RPAREN statement:variables
		{:
			RESULT=variables;
		:}
	;
while_statement_no_short_if ::=
		WHILE LPAREN expression RPAREN statement_no_short_if:variables
		{:
			RESULT=variables;
		:}
	;
do_statement ::=
		DO statement:variables WHILE LPAREN expression RPAREN SEMICOLON
		{:
			RESULT=variables;
		:}
	;
for_statement ::=
		FOR LPAREN for_init_opt:prev_vars SEMICOLON expression_opt SEMICOLON
			for_update_opt RPAREN statement:new_vars
		{:
			if(prev_vars != null && new_vars != null){
				prev_vars.addAll(new_vars);
				RESULT=prev_vars;
			}else if(new_vars != null){
				RESULT=new_vars;
			}else{
				RESULT=prev_vars;
			}
		:}
	;
for_statement_no_short_if ::=
		FOR LPAREN for_init_opt:prev_vars SEMICOLON expression_opt SEMICOLON
			for_update_opt RPAREN statement_no_short_if:new_vars
		{:
			if(prev_vars != null && new_vars != null){
				prev_vars.addAll(new_vars);
				RESULT=prev_vars;
			}else if(new_vars != null){
				RESULT=new_vars;
			}
			else{
				RESULT=prev_vars;
			}
		:}
	;
for_init_opt ::=
	|	for_init:variables
	{:
		RESULT=variables;
	:}
	;
for_init ::=	statement_expression_list
	|	local_variable_declaration:variables
		{:
			RESULT=variables;
		:}

	;
for_update_opt ::=
	|	for_update

	;
for_update ::=	statement_expression_list
	;
statement_expression_list ::=
		statement_expression
	|	statement_expression_list COMMA statement_expression
	;

identifier_opt ::= 
	|	IDENTIFIER:id
	{: /*System.out.println(id);*/ :}
	;

break_statement ::=
		BREAK identifier_opt SEMICOLON
	;

return_statement ::=
		RETURN expression_opt SEMICOLON
	;

//Expressions
primary ::=	primary_no_new_array	
	;
primary_no_new_array ::=
		literal
	|	THIS
	|	LPAREN expression RPAREN
	|	class_instance_creation_expression
	|	field_access
	|	method_invocation					
	;
class_instance_creation_expression ::=
		NEW class_type LPAREN argument_list_opt RPAREN		
	;
argument_list_opt ::=
	|	argument_list
	;
argument_list ::=
		expression
	|	argument_list COMMA expression
	;
field_access ::=
		primary DOT IDENTIFIER:id
		{: /*System.out.println(id);*/ :}
	|	SUPER DOT IDENTIFIER:id
	{: /*System.out.println(id);*/ :}
	|	name DOT SUPER DOT IDENTIFIER:id
	{: /*System.out.println(id);*/ :}
	;
method_invocation ::=
		name LPAREN argument_list_opt RPAREN
	|	primary DOT IDENTIFIER:id LPAREN argument_list_opt RPAREN
	{: /*System.out.println(id);*/ :}
	|	SUPER DOT IDENTIFIER:id LPAREN argument_list_opt RPAREN
	{: /*System.out.println(id);*/ :}
	|	name DOT SUPER DOT IDENTIFIER:id LPAREN argument_list_opt RPAREN
	{: /*System.out.println(id);*/ :}
	;

postfix_expression ::=
		primary
	|	name
	|	postincrement_expression
	|	postdecrement_expression
	;
postincrement_expression ::=
		postfix_expression PLUSPLUS
	;
postdecrement_expression ::=
		postfix_expression MINUSMINUS
	;
unary_expression ::=
		preincrement_expression
	|	predecrement_expression
	|	PLUS unary_expression
	|	MINUS unary_expression
	|	unary_expression_not_plus_minus
	;
preincrement_expression ::=
		PLUSPLUS unary_expression
	;
predecrement_expression ::=
		MINUSMINUS unary_expression
	;
unary_expression_not_plus_minus ::=
		postfix_expression	
	|	NOT unary_expression	
	;

multiplicative_expression ::=
		unary_expression
	|	multiplicative_expression MULT unary_expression
	|	multiplicative_expression DIV unary_expression
	|	multiplicative_expression MOD unary_expression
	;
additive_expression ::=
		multiplicative_expression
	|	additive_expression PLUS multiplicative_expression
	|	additive_expression MINUS multiplicative_expression
	;
shift_expression ::=
		additive_expression	
	;
relational_expression ::=
		shift_expression
	|	relational_expression LT shift_expression
	|	relational_expression GT shift_expression
	|	relational_expression LTEQ shift_expression
	|	relational_expression GTEQ shift_expression	
	;
equality_expression ::=
		relational_expression
	|	equality_expression EQEQ relational_expression
	|	equality_expression NOTEQ relational_expression
	;
and_expression ::=
		equality_expression
	|	and_expression AND equality_expression
	;
exclusive_or_expression ::=
		and_expression	
	;
inclusive_or_expression ::=
		exclusive_or_expression
	|	inclusive_or_expression OR exclusive_or_expression
	;
conditional_and_expression ::=
		inclusive_or_expression
	|	conditional_and_expression ANDAND inclusive_or_expression
	;
conditional_or_expression ::=
		conditional_and_expression
	|	conditional_or_expression OROR conditional_and_expression
	;
conditional_expression ::=
		conditional_or_expression
	;
assignment_expression ::=
		conditional_expression
	|	assignment
	;
assignment ::=	left_hand_side assignment_operator assignment_expression
	;
left_hand_side ::=
		name
	|	field_access	
	;
assignment_operator ::=
		EQ
	|	MULTEQ
	|	DIVEQ
	|	MODEQ
	|	PLUSEQ
	|	MINUSEQ				
	;
expression_opt ::=
	|	expression
	;
expression ::=	assignment_expression
	;
constant_expression ::=
		expression
	;
